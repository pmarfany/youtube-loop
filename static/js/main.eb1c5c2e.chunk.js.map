{"version":3,"sources":["utils/string.ts","utils/youtube.ts","componenets/YoutubePlayer/YoutubePlayer.tsx","componenets/YoutubeSearchInput/YoutubeSearchInput.tsx","App.tsx","hooks/useQuery.ts","index.tsx"],"names":["contains","text","value","indexOf","HOSTNAME","PATHNAME","ID_PARAM","isValidLink","link","url","URL","useHttps","arguments","length","undefined","protocol","concat","clearLink","replace","appendProtocol","hostname","pathname","searchParams","get","e","getLinkFromId","videoId","getIdFromLink","Error","YoutubePlayer","_ref","videoUrl","videoRef","useRef","react_default","a","createElement","Fragment","youtube_default","controls","pip","width","height","ref","onEnded","current","internalPlayer","getInternalPlayer","playVideo","console","error","index_esm","onEnd","log","opts","YoutubeSearchInput","onSubmit","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","submitValue","className","type","placeholder","onChange","currentTarget","onKeyDown","key","onClick","App","_useQuery","_URLSearchParams$get","location","useLocation","history","useHistory","URLSearchParams","search","push","useQuery","_useQuery2","setVideoId","YoutubeSearchInput_YoutubeSearchInput","YoutubePlayer_YoutubePlayer","ReactDOM","render","react_router_dom","basename","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.eb1c5c2e.chunk.js","sourcesContent":["function contains(text: string, value: string): boolean {\n  return text.indexOf(value) > -1;\n}\n\nexport { contains };\n","import {contains} from './string';\n\nconst HOSTNAME = 'youtube';\nconst PATHNAME = '/watch';\nconst ID_PARAM = 'v';\n\nfunction appendProtocol(link: string, useHttps: boolean = false): string {\n  const protocol = `http${useHttps ? 's' : ''}`;\n  const clearLink = link.replace(/^https?:\\/\\//,'');\n\n  return `${protocol}://${clearLink}`;\n}\n\nfunction isValidLink(link: string): boolean {\n  try {\n    const url = new URL(appendProtocol(link, true));\n\n    return contains(url.hostname, HOSTNAME) &&\n           contains(url.pathname, PATHNAME) &&\n           url.searchParams.get(ID_PARAM) !== null;\n  } catch (e) { return false; }\n}\n\nfunction getLinkFromId(videoId: string): string {\n  return `https://www.${HOSTNAME}.com${PATHNAME}?${ID_PARAM}=${videoId}`;\n}\n\nfunction getIdFromLink(link: string): string {\n  if ( !isValidLink(link) ) { throw new Error('Youtube link is invalid'); }\n\n  return new URL(link).searchParams.get(ID_PARAM) as string;\n}\n\nexport { ID_PARAM, isValidLink, getLinkFromId, getIdFromLink };","import React, {useRef} from 'react';\nimport ReactPlayer from 'react-player/youtube';\nimport {getIdFromLink, isValidLink} from '../../utils/youtube';\nimport YouTube from 'react-youtube';\n\ntype YoutubePlayerProps = {\n  videoUrl: string;\n}\n\nconst YoutubePlayer: React.FC<YoutubePlayerProps> = ({ videoUrl }) => {\n  const videoRef = useRef<ReactPlayer>(null);\n\n  const onEnded = () => {\n    if ( videoRef.current === null ) { return; }\n    const internalPlayer: any = videoRef.current.getInternalPlayer();\n\n    if ( !internalPlayer.playVideo ) { return console.error('Youtube API not loaded!'); }\n    internalPlayer.playVideo();\n  };\n\n  if ( !isValidLink(videoUrl) ) { return null; }\n\n  return (\n    <>\n      <ReactPlayer\n        url={videoUrl}\n        controls={true}\n        pip={true}\n        width=\"100%\"\n        height=\"100%\"\n        ref={videoRef}\n        onEnded={onEnded}\n      />\n\n      <YouTube\n        videoId={getIdFromLink(videoUrl)}\n        onEnd={console.log}\n        opts={{ height: '100%', width: '100%' }}\n      />\n    </>\n  );\n};\n\nexport { YoutubePlayer };\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\n\ninterface SearchInputProps {\n  value: string;\n  onSubmit: (value: string) => void;\n}\n\nconst YoutubeSearchInput: React.FC<SearchInputProps> = ({ value, onSubmit }) => {\n  const [inputValue, setInputValue] = useState(value);\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value);\n\n  const submitValue = () => onSubmit(inputValue);\n\n  const onKeyDown = (e: KeyboardEvent) => {\n    if ( e.key !== 'Enter' ) { return; }\n    submitValue();\n  };\n\n  return (\n    <div className=\"input-wrapper input-search\">\n      <input\n        type=\"search\"\n        placeholder=\"Insert youtube videoId (?v=)\"\n        className=\"input-element\"\n        value={inputValue}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n      />\n      <button className=\"search-button\" onClick={submitValue}>Search</button>\n    </div>\n  );\n};\n\nexport { YoutubeSearchInput };\n","import React from 'react';\nimport 'reset-css';\nimport {useQuery} from './hooks/useQuery';\nimport {getLinkFromId, ID_PARAM} from './utils/youtube';\nimport {YoutubePlayer} from './componenets/YoutubePlayer/YoutubePlayer';\nimport {YoutubeSearchInput} from './componenets/YoutubeSearchInput/YoutubeSearchInput';\n\nconst App: React.FC = () => {\n  const [videoId, setVideoId] = useQuery(ID_PARAM);\n\n  return (\n    <>\n      <h1>Youtube Loop</h1>\n\n      <YoutubeSearchInput value={videoId} onSubmit={setVideoId} key={videoId} />\n      <YoutubePlayer videoUrl={getLinkFromId(videoId)} />\n    </>\n  );\n};\n\nexport { App };\n","import {useHistory, useLocation} from 'react-router-dom';\n\ntype UseQuery = [string, (value: string) => void];\n\nfunction useQuery(key: string): UseQuery {\n  const location = useLocation();\n  const history = useHistory();\n\n  return [\n    new URLSearchParams(location.search).get(key) ?? '',\n    (value: string) => history.push(`/?${key}=${value}`),\n  ];\n}\n\nexport { useQuery };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/youtube-loop\">\n    <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}