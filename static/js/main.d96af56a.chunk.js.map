{"version":3,"sources":["utils/string.ts","utils/youtube.ts","componenets/YoutubePlayer/YoutubePlayer.tsx","componenets/YoutubeSearchInput/YoutubeSearchInput.tsx","App.tsx","hooks/useQuery.ts","index.tsx"],"names":["contains","text","value","indexOf","HOSTNAME","PATHNAME","ID_PARAM","getLinkFromId","videoId","concat","YoutubePlayer","_ref","videoUrl","videoRef","useRef","link","url","URL","useHttps","arguments","length","undefined","protocol","clearLink","replace","appendProtocol","hostname","pathname","searchParams","get","e","isValidLink","react_default","a","createElement","youtube_default","controls","pip","width","height","ref","onEnded","current","internalPlayer","getInternalPlayer","playVideo","console","error","YoutubeSearchInput","onSubmit","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","useEffect","submitValue","className","type","placeholder","onChange","currentTarget","onKeyDown","key","onClick","App","_useQuery","_URLSearchParams$get","location","useLocation","history","useHistory","URLSearchParams","search","useQuery","_useQuery2","setVideoId","Fragment","YoutubeSearchInput_YoutubeSearchInput","YoutubePlayer_YoutubePlayer","ReactDOM","render","react_router_dom","App_App","document","getElementById"],"mappings":"+LAAA,SAASA,EAASC,EAAcC,GAC9B,OAAOD,EAAKE,QAAQD,IAAU,ECChC,IAAME,EAAW,UACXC,EAAW,SACXC,EAAW,IAmBjB,SAASC,EAAcC,GACrB,qBAAAC,OAAsBL,EAAtB,QAAAK,OAAqCJ,EAArC,KAAAI,OAAiDH,EAAjD,KAAAG,OAA6DD,wBChBzDE,EAA8C,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAC/CC,EAAWC,iBAAoB,MAUrC,ODNF,SAAqBC,GACnB,IACE,IAAMC,EAAM,IAAIC,IATpB,SAAwBF,GAAiD,IAAnCG,EAAmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACjEG,EAAQ,OAAAb,OAAUS,EAAW,IAAM,IACnCK,EAAYR,EAAKS,QAAQ,eAAe,IAE9C,SAAAf,OAAUa,EAAV,OAAAb,OAAwBc,GAKFE,CAAeV,GAAM,IAEzC,OAAOf,EAASgB,EAAIU,SAAUtB,IACvBJ,EAASgB,EAAIW,SAAUtB,IACY,OAAnCW,EAAIY,aAAaC,IAAIvB,GAC5B,MAAOwB,GAAK,OAAO,GCDfC,CAAYnB,GAGhBoB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEjB,IAAKJ,EACLwB,UAAU,EACVC,KAAK,EACLC,MAAM,OACNC,OAAO,OACPC,IAAK3B,EACL4B,QAlBY,WACd,GAA0B,OAArB5B,EAAS6B,QAAd,CACA,IAAMC,EAAsB9B,EAAS6B,QAAQE,oBAE7C,IAAMD,EAAeE,UAAc,OAAOC,QAAQC,MAAM,2BACxDJ,EAAeE,gBAGsB,MCZnCG,EAAiD,SAAArC,GAAyB,IAAtBT,EAAsBS,EAAtBT,MAAO+C,EAAetC,EAAfsC,SAAeC,EAC1CC,mBAASjD,GADiCkD,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACvEK,EADuEH,EAAA,GAC3DI,EAD2DJ,EAAA,GAI9EK,oBAAU,kBAAMD,EAActD,IAAQ,CAACA,IAEvC,IAEMwD,EAAc,kBAAMT,EAASM,IAOnC,OACEvB,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,8BACb3B,EAAAC,EAAAC,cAAA,SACE0B,KAAK,SACLC,YAAY,+BACZF,UAAU,gBACVzD,MAAOqD,EACPO,SAhBW,SAAChC,GAAD,OAAsC0B,EAAc1B,EAAEiC,cAAc7D,QAiB/E8D,UAbY,SAAClC,GACF,UAAVA,EAAEmC,KACPP,OAaE1B,EAAAC,EAAAC,cAAA,UAAQyB,UAAU,gBAAgBO,QAASR,GAA3C,YCzBAS,EAAgB,WAAM,IAAAC,ECH5B,SAAkBH,GAAuB,IAAAI,EACjCC,EAAWC,cACXC,EAAUC,cAEhB,MAAO,SAAAJ,EACL,IAAIK,gBAAgBJ,EAASK,QAAQ9C,IAAIoC,UADpC,IAAAI,IAC4C,GACjD,SAACnE,GAAD,OAAmBsE,EAAQhD,QAAR,KAAAf,OAAqBwD,EAArB,KAAAxD,OAA4BP,MDFnB0E,CAAStE,GADbuE,EAAAxB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GACnB5D,EADmBqE,EAAA,GACVC,EADUD,EAAA,GAG1B,OACE7C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8C,SAAA,KACE/C,EAAAC,EAAAC,cAAA,0BAEAF,EAAAC,EAAAC,cAAC8C,EAAD,CAAoB9E,MAAOM,EAASyC,SAAU6B,IAC9C9C,EAAAC,EAAAC,cAAC+C,EAAD,CAAerE,SAAUL,EAAcC,eEV7C0E,IAASC,OACPnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACEpD,EAAAC,EAAAC,cAACmD,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.d96af56a.chunk.js","sourcesContent":["function contains(text: string, value: string): boolean {\n  return text.indexOf(value) > -1;\n}\n\nexport { contains };\n","import {contains} from './string';\n\nconst HOSTNAME = 'youtube';\nconst PATHNAME = '/watch';\nconst ID_PARAM = 'v';\n\nfunction appendProtocol(link: string, useHttps: boolean = false): string {\n  const protocol = `http${useHttps ? 's' : ''}`;\n  const clearLink = link.replace(/^https?:\\/\\//,'');\n\n  return `${protocol}://${clearLink}`;\n}\n\nfunction isValidLink(link: string): boolean {\n  try {\n    const url = new URL(appendProtocol(link, true));\n\n    return contains(url.hostname, HOSTNAME) &&\n           contains(url.pathname, PATHNAME) &&\n           url.searchParams.get(ID_PARAM) !== null;\n  } catch (e) { return false; }\n}\n\nfunction getLinkFromId(videoId: string): string {\n  return `https://www.${HOSTNAME}.com${PATHNAME}?${ID_PARAM}=${videoId}`;\n}\n\nexport { ID_PARAM, isValidLink, getLinkFromId };","import React, {useCallback, useRef} from 'react';\nimport ReactPlayer from 'react-player/youtube';\nimport {isValidLink} from '../../utils/youtube';\n\ntype YoutubePlayerProps = {\n  videoUrl: string;\n}\n\nconst YoutubePlayer: React.FC<YoutubePlayerProps> = ({ videoUrl }) => {\n  const videoRef = useRef<ReactPlayer>(null);\n\n  const onEnded = () => {\n    if ( videoRef.current === null ) { return; }\n    const internalPlayer: any = videoRef.current.getInternalPlayer();\n\n    if ( !internalPlayer.playVideo ) { return console.error('Youtube API not loaded!'); }\n    internalPlayer.playVideo();\n  };\n\n  if ( !isValidLink(videoUrl) ) { return null; }\n\n  return (\n    <ReactPlayer\n      url={videoUrl}\n      controls={true}\n      pip={true}\n      width=\"100%\"\n      height=\"100%\"\n      ref={videoRef}\n      onEnded={onEnded}\n    />\n  );\n};\n\nexport { YoutubePlayer };\n","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\n\ninterface SearchInputProps {\n  value: string;\n  onSubmit: (value: string) => void;\n}\n\nconst YoutubeSearchInput: React.FC<SearchInputProps> = ({ value, onSubmit }) => {\n  const [inputValue, setInputValue] = useState(value);\n\n  // Could remove this if we used a 'key' outside\n  useEffect(() => setInputValue(value), [value]);\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value);\n\n  const submitValue = () => onSubmit(inputValue);\n\n  const onKeyDown = (e: KeyboardEvent) => {\n    if ( e.key !== 'Enter' ) { return; }\n    submitValue();\n  };\n\n  return (\n    <div className=\"input-wrapper input-search\">\n      <input\n        type=\"search\"\n        placeholder=\"Insert youtube videoId (?v=)\"\n        className=\"input-element\"\n        value={inputValue}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n      />\n      <button className=\"search-button\" onClick={submitValue}>Search</button>\n    </div>\n  );\n};\n\nexport { YoutubeSearchInput };\n","import React from 'react';\nimport 'reset-css';\nimport {useQuery} from './hooks/useQuery';\nimport {getLinkFromId, ID_PARAM} from './utils/youtube';\nimport {YoutubePlayer} from './componenets/YoutubePlayer/YoutubePlayer';\nimport {YoutubeSearchInput} from './componenets/YoutubeSearchInput/YoutubeSearchInput';\n\nconst App: React.FC = () => {\n  const [videoId, setVideoId] = useQuery(ID_PARAM);\n\n  return (\n    <>\n      <h1>Youtube Loop</h1>\n\n      <YoutubeSearchInput value={videoId} onSubmit={setVideoId}/>\n      <YoutubePlayer videoUrl={getLinkFromId(videoId)} />\n    </>\n  );\n};\n\nexport { App };\n","import {useHistory, useLocation} from 'react-router-dom';\n\ntype UseQuery = [string, (value: string) => void];\n\nfunction useQuery(key: string): UseQuery {\n  const location = useLocation();\n  const history = useHistory();\n\n  return [\n    new URLSearchParams(location.search).get(key) ?? '',\n    (value: string) => history.replace(`/?${key}=${value}`),\n  ];\n}\n\nexport { useQuery };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}